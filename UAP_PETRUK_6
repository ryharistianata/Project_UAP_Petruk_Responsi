#include <iostream>
#include <cstring>
#include <string>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <algorithm>
#include <ncurses/curses.h>
#include <cstdlib>
#include <windows.h>

using namespace std;

void setColor(int color) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

void resetColor() {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
}

void typeText(const string& text, int delay = 30) {
    for (char c : text) {
        cout << c << flush;
        Sleep(delay);
    }
}

void hotels(){

    string gass[] = {
        "                     * * * * *                    ",
        "              WELLCOME TO WELL HOTEL              ",
        "==================================================",
        "|################################################|",
        "|#                                              #|",
        "|#             +-------------------+            #|",
        "|#             |    FRONT DESK     |            #|",
        "|#             +-------------------+            #|",
        "|#                                              #|",
        "|#                                              #|",
        "|#   |||||||||||||||||||||||||||||||||||||      #|",
        "|#   |                                   |      #|",
        "|#   |       RED CARPET ENTRANCE         |      #|",
        "|#   |                                   |      #|",
        "|#   |||||||||||||||||||||||||||||||||||||      #|",
        "|################################################|",
        "=================================================="
    };

    system("cls");

    for (int i = 0; i < 16; i++) {
        if (i == 1) setColor(14);                   
        else if (i >= 5 && i <= 8) setColor(11);    
        else if (i >= 11 && i <= 13) setColor(12);  
        else setColor(7);                           

        cout << gass[i] << endl;
        Sleep(100); 
    }
    
}

void LOAD1(){ 
    initscr();

    curs_set(0);
    
    string loading = "=== || LOADING ||                   ";

    for(int i = 0; i < 27; i++){
        mvprintw(2,i, "=");
        mvprintw(3,i + 5, "%c", loading[i]);
        mvprintw(4,i + 2, "===");
        mvprintw(5,i + 5, "%c", loading[i]); 
        mvprintw(6,i, "=");

        refresh();
        Sleep(100);
    }

    for(int i = 1; i <= 100; i++){
        mvprintw(3, 23, "%d", i);
        mvprintw(5, 23, "%d", i);
        mvprintw(3, 26, "%%");
        mvprintw(5, 26, "%%");
        refresh();
        Sleep(50);
    }

    clear();
    curs_set(1);
    endwin();
}

void LOAD2(){
	        	        	system ("cls");
        	  		  setColor(12);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();
	
        	  		  setColor(9);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();

        	  		  setColor(12);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();

        	  		  setColor(9);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();
						 system ("cls");
            
            setColor(9); 
            	
}
struct Kamar {
    int id;
    char namaTamu[30];
    string jenis;
    int harga;
    bool tersedia;
};


class Pemesanan {
private:
    vector<Kamar> dataKamar;
    list<string> riwayatTamu;
    queue<string> antrianCheckin;
    stack<string> historiPembayaran;

public:
    
    Pemesanan() {
        inisialisasiKamar();
    }

    
    void inisialisasiKamar();
    void tampilkanKamar();
    void pesanKamar();
    void prosesCheckin();
    void prosesCheckout();
    void tampilkanRiwayat();
};

void Pemesanan::inisialisasiKamar() {
    string jenis[3] = {"Single", "Double", "Suite "};
    int harga[3] = {250000, 350000, 500000};
    for (int i = 0; i < 6; i++) {
        Kamar k;
        k.id = i+1;
        strcpy(k.namaTamu, "");
        k.jenis = jenis[i % 3];
        k.harga = harga[i % 3];
        k.tersedia = true;
        dataKamar.push_back(k);
    }
}

void Pemesanan::tampilkanKamar() {
    system("cls");
    setColor(14);
    typeText("\nDaftar Kamar:\n\n", 25);
    setColor(7);
    for (auto &k : dataKamar) {
        string status = k.tersedia ? "Tersedia" : k.namaTamu;
        typeText("ID: " + to_string(k.id) + " | Jenis: " + k.jenis +
                 " | Harga: Rp" + to_string(k.harga) + " | Status: " + status + "\n", 20);
    }
}

void Pemesanan::pesanKamar() {
    system("cls");
    int id;
    char nama[30];
    tampilkanKamar();

    setColor(14);
    typeText("\nMasukkan ID kamar yang ingin dipesan: ", 25);
    cin >> id;
    cin.ignore();

    if (id < 1 || id > dataKamar.size() || !dataKamar[id - 1].tersedia) {
        setColor(12);
        typeText("Kamar tidak tersedia atau ID salah.\n", 30);
        return;
    }

    setColor(14);
    typeText("Masukkan nama tamu: ", 25);
    cin.getline(nama, 30);

    strncpy(dataKamar[id - 1].namaTamu, nama, 30);
    dataKamar[id - 1].tersedia = false;

    historiPembayaran.push(nama);
    antrianCheckin.push(nama);
    riwayatTamu.push_back(nama);

    setColor(10);
    typeText("\nKamar berhasil dipesan atas nama: ", 25);
    cout << nama << endl;
    cin.get();
    system ("cls");
}

void Pemesanan::prosesCheckin() {
    system("cls");

    setColor(14);
    cout << "\n";
    typeText("===========++==================================++===========\n", 2);
    typeText("||                    HOTEL CHECK-IN                      ||\n", 2);
    typeText("===========++==================================++===========\n\n", 2);

    if (antrianCheckin.empty()) {
        setColor(12);
        typeText(">>> Tidak ada tamu dalam antrian check-in <<<\n\n", 30);
    } else {
        string tamu = antrianCheckin.front();
        antrianCheckin.pop();

        setColor(10);
        typeText("Memproses check-in untuk tamu: ", 20);
        setColor(11);
        typeText(tamu + "\n", 30);

        typeText("\nMempersiapkan kamar", 20);
        for (int i = 0; i < 3; i++) {
            cout << ". " << flush;
            Sleep(400);
        }
        cout << "\n";

        setColor(14);
        typeText(">>> Check-in berhasil! Selamat datang dan selamat beristirahat. <<<\n", 25);
    }

    setColor(7);
    typeText("\nTekan ENTER untuk kembali ke menu utama...", 15);
    cin.get();
    
    system("cls");
}


void Pemesanan::prosesCheckout() {
    system("cls");
    int id;
    setColor(14);
    typeText("\nMasukkan ID kamar untuk check-out: ", 25);
    cin >> id;
    cin.ignore();

    if (id < 1 || id > dataKamar.size() || dataKamar[id - 1].tersedia) {
        setColor(12);
        typeText("ID tidak valid atau kamar sudah kosong.\n", 25);
        return;
    }

    setColor(14);
    typeText("Tamu atas nama ", 25);
    cout << dataKamar[id - 1].namaTamu;
    typeText(" telah check-out.\n", 25);

    strcpy(dataKamar[id - 1].namaTamu, "");
    dataKamar[id - 1].tersedia = true;
    
    cin.get();
}

void Pemesanan::tampilkanRiwayat() {
    system("cls");
    setColor(14);
    typeText("\nRiwayat Tamu (List):\n", 25);
    setColor(7);
    for (auto &nama : riwayatTamu) {
        typeText("- " + nama + "\n", 20);
    }

    setColor(14);
    typeText("\nHistori Pembayaran Terakhir (Stack): ", 25);
    setColor(7);
    if (!historiPembayaran.empty()) {
        typeText(historiPembayaran.top() + "\n", 25);
    } else {
        typeText("Tidak ada pembayaran.\n", 25);
    }
}


void merge(vector<int> &v, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++) L[i] = v[l + i];
    for (int j = 0; j < n2; j++) R[j] = v[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) v[k++] = L[i++];
        else v[k++] = R[j++];
    }
    while (i < n1) v[k++] = L[i++];
    while (j < n2) v[k++] = R[j++];
}

void mergeSort(vector<int> &v, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(v, l, m);
        mergeSort(v, m + 1, r);
        merge(v, l, m, r);
    }
}

void fiturSortingHarga() {
    system("cls");
    vector<int> harga = {350000, 250000, 500000, 250000, 500000};
    mergeSort(harga, 0, harga.size() - 1);

    setColor(14);
    typeText("\nHarga kamar setelah diurutkan (Divide & Conquer): ", 25);
    setColor(7);
    for (int h : harga) {
        typeText(to_string(h) + " ", 20);
    }
    cout << endl;
}

// === Main Program ===
int main() {
    Pemesanan hotel;
    int pilihan, pil;
    
    LOAD1();
    
    main_menu :
    	
        system("cls");
    
    setColor(1);
    cout << "		                       ======================" << endl;
    resetColor(); 
    
    setColor(3);
    cout << "                                          SHUP BROHH !! " << endl; 
    resetColor();
    
    
    setColor(1);
	cout << "                                   ======================   " << endl; 
	resetColor();
	
	cin.get(); 
	
	cout << "\n\n\n";
	
	setColor(1);
	cout << "============================================" << endl;
	resetColor();
	
	setColor(3);
	cout << "   ==  SELAMAT DATANG DI MAIN MENU ++" << endl;
	resetColor();
	
	setColor(1);
	cout << "=======================================\n" << endl;
	resetColor();
	
	cin.get();
	
	setColor(1);
	cout << "==========================" << endl;
	cout << "== MASUKIN   ++" << endl;
	cout << "==========================" << endl;
	resetColor();
	
	setColor(3);
	cout << "== 1 : MENU " << endl;
	cout << "== 2 : TEAM " << endl;
	cout << "== 3 : KELUAR" << endl;
	resetColor();
	
	setColor(1);
	cout << "==========================" << endl;
	cout << "++ yg mana ?? "; cin >> pil;
	resetColor();
	
	    system ("cls");
    
    switch (pil){
    	
    	case 1 :
    		
    	system ("cls");
    	LOAD2();
    	
    	hotels();
    	
    		    do {
			setColor(14);
			typeText("\n--- Sistem Pemesanan Hotel ---\n\n", 25);
			setColor(7);
			typeText("1. Tampilkan Kamar\n", 20);
			typeText("2. Pesan Kamar\n", 20);
			typeText("3. Proses Check-in\n", 20);
			typeText("4. Proses Check-out\n", 20);
			typeText("5. Tampilkan Riwayat\n", 20);
			typeText("6. Sorting Harga (Divide and Conquer)\n", 20);
			typeText("7. Main menu \n", 20);
			typeText("0. Keluar\n\n", 20);
			typeText("Pilih menu : ", 20);
			cin >> pilihan;
			cin.ignore();
			
			system ("cls");

        switch (pilihan) {
            case 1: hotel.tampilkanKamar(); break;
            case 2: hotel.pesanKamar(); break;
            case 3: hotel.prosesCheckin(); break;
            case 4: hotel.prosesCheckout(); break;
            case 5: hotel.tampilkanRiwayat(); break;
            case 6: fiturSortingHarga(); break;
            case 7: goto main_menu; break;
            case 0: cout << "\nTerima kasih.\n"; break;
            default: cout << "Pilihan tidak valid.\n";
        }
    } while (pilihan != 0);
    		break;
    	
    	case 2 :
    		
    	system ("cls");
    	LOAD2();
    		
    		char pil2;
    		
    		    setColor(9);  
    cout << "==========================================================\n"; 
    resetColor();
    
    setColor(12); 
    cout << "    ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  \n";
    cout << "  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  == \n";
    cout << "    ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  \n"; 
    resetColor();
    
    cout << " --------------------------------------------------------\n";
    
    setColor(12);  
    cout << "    ++   ++  ++      ++++++     +++++++  ++++++          \n";
    cout << "    ++   ++          ++   +++   ++       ++  +++         \n";
    cout << "    +++++++  ++      ++     ++  +++++    ++    ++        \n";
    cout << "    +++++++  ++      ++     ++  +++++    ++  +++         \n";
    cout << "    ++   ++  ++      ++   +++   ++       ++  ++          \n";
    cout << "    ++   ++  ++      ++++++     +++++++  ++   ++         \n";
    resetColor();
    
    cout << " --------------------------------------------------------\n"; 
    
    setColor(12);  
    cout << "    ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  \n";
    cout << "  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  == \n";
    cout << "    ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  ==  \n"; 
    resetColor();
    
    setColor(9);  
    cout << "==========================================================\n";
    resetColor();
    
    Sleep(3000);
    
    system("cls");  
    
    setColor(14);
    
    cout << "=====================================" << endl;
    cout << "    == KELOMPOK ==\n";
    cout << "=====================================" << endl;
    cout << "\n\n";
    setColor(13);
    typeText("1. Ruddy Haristianata \n", 40);
    typeText("-> 2457051011 \n\n", 40);
    
    typeText("2. Wildan Humam Alpasya \n", 40);
    typeText("-> 2417051064 \n\n", 40);
    
    typeText("3. Reggy Desvita Kamal \n", 40);
    typeText("-> 2417051016 \n\n", 40);
    
    typeText("4. Zahra Ayesa \n", 40);
    typeText("-> 2417051027 \n\n", 40);
    
    setColor(14);
    cout << "=====================================" << endl;
    cout << "=++==               +==-=         _+=" << endl;      
    cout << "=====================================" << endl;
    
    
    cout << "Ingin kembali ke menu utama (y/n)? "; cin >> pil2;
    
    if ( pil2 == 'y' || pil2 == 'Y'){
    	goto main_menu;
	} 
	
	else if ( pil2 == 'n' || pil2 == 'N'){
		system("cls");
		cin.get();
	}
    	break;
    	
    	case 3 :
    		
    	LOAD2();
    		return 1;
    	break;
	}
   
    return 0;
}
