#include <iostream>
#include <cstring>
#include <string>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <algorithm>
#include <ncurses/curses.h>
#include <cstdlib>
#include <windows.h>

using namespace std;

void setColor(int color) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

void resetColor() {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
}

void typeText(const string& text, int delay = 30) {
    for (char c : text) {
        cout << c << flush;
        Sleep(delay);
    }
}

void hotels(){

    string gass[] = {
        "                     * * * * *                    ",
        "              WELLCOME TO WELL HOTEL              ",
        "==================================================",
        "|################################################|",
        "|#                                              #|",
        "|#             +-------------------+            #|",
        "|#             |    FRONT DESK     |            #|",
        "|#             +-------------------+            #|",
        "|#                                              #|",
        "|#                                              #|",
        "|#   |||||||||||||||||||||||||||||||||||||      #|",
        "|#   |                                   |      #|",
        "|#   |       RED CARPET ENTRANCE         |      #|",
        "|#   |                                   |      #|",
        "|#   |||||||||||||||||||||||||||||||||||||      #|",
        "|################################################|",
        "=================================================="
    };

    system("cls");

    for (int i = 0; i < 16; i++) {
        if (i == 1) setColor(14);                   
        else if (i >= 5 && i <= 8) setColor(11);    
        else if (i >= 11 && i <= 13) setColor(12);  
        else setColor(7);                           

        cout << gass[i] << endl;
        Sleep(100); 
    }
    
}

void LOAD1(){ 
    initscr();

    curs_set(0);
    
    string loading = "=== || LOADING ||                   ";

    for(int i = 0; i < 27; i++){
        mvprintw(2,i, "=");
        mvprintw(3,i + 5, "%c", loading[i]);
        mvprintw(4,i + 2, "===");
        mvprintw(5,i + 5, "%c", loading[i]); 
        mvprintw(6,i, "=");

        refresh();
        Sleep(100);
    }

    for(int i = 1; i <= 100; i++){
        mvprintw(3, 23, "%d", i);
        mvprintw(5, 23, "%d", i);
        mvprintw(3, 26, "%%");
        mvprintw(5, 26, "%%");
        refresh();
        Sleep(50);
    }

    clear();
    curs_set(1);
    endwin();
}

void LOAD2(){
	        	        	system ("cls");
        	  		  setColor(12);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();
	
        	  		  setColor(9);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();

        	  		  setColor(12);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();

        	  		  setColor(9);
  						  for (int i = 0; i < 5000; i++){
  						  	cout << " ||  LOADING  || ";
								} 
						resetColor();
						 system ("cls");
            
            setColor(9); 
            	
}
struct Kamar {
    int id;
    char namaTamu[30];
    string jenis;
    int harga;
    bool tersedia;
};


class Pemesanan {
private:
    vector<Kamar> dataKamar;
    list<string> riwayatTamu;
    queue<string> antrianCheckin;
    stack<string> historiPembayaran;

public:
    
    Pemesanan() {
        inisialisasiKamar();
    }

    
    void inisialisasiKamar();
    void tampilkanKamar();
    void pesanKamar();
    void prosesCheckin();
    void prosesCheckout();
    void tampilkanRiwayat();
};

void Pemesanan::inisialisasiKamar() {
    string jenis[3] = {"Single", "Double", "Suite "};
    int harga[3] = {250000, 350000, 500000};
    for (int i = 0; i < 6; i++) {
        Kamar k;
        k.id = i+1;
        strcpy(k.namaTamu, "");
        k.jenis = jenis[i % 3];
        k.harga = harga[i % 3];
        k.tersedia = true;
        dataKamar.push_back(k);
    }
}

void Pemesanan::tampilkanKamar() {
    system("cls");
    setColor(14);
    typeText("\nDaftar Kamar:\n\n", 25);
    setColor(7);
    for (auto &k : dataKamar) {
        string status = k.tersedia ? "Tersedia" : k.namaTamu;
        typeText("ID: " + to_string(k.id) + " | Jenis: " + k.jenis +
                 " | Harga: Rp" + to_string(k.harga) + " | Status: " + status + "\n", 20);
    }
}

void Pemesanan::pesanKamar() {
    system("cls");
    int id;
    char nama[30];
    tampilkanKamar();

    setColor(14);
    typeText("\nMasukkan ID kamar yang ingin dipesan: ", 25);
    cin >> id;
    cin.ignore();

    if (id < 1 || id > dataKamar.size() || !dataKamar[id - 1].tersedia) {
        setColor(12);
        typeText("Kamar tidak tersedia atau ID salah.\n", 30);
        return;
    }

    setColor(14);
    typeText("Masukkan nama tamu: ", 25);
    cin.getline(nama, 30);

    strncpy(dataKamar[id - 1].namaTamu, nama, 30);
    dataKamar[id - 1].tersedia = false;

    historiPembayaran.push(nama);
    antrianCheckin.push(nama);
    riwayatTamu.push_back(nama);

    setColor(10);
    typeText("\nKamar berhasil dipesan atas nama: ", 25);
    cout << nama << endl;
    cin.get();
    system ("cls");
}

void Pemesanan::prosesCheckin() {
    system("cls");

    setColor(14);
    cout << "\n";
    typeText("===========++==================================++===========\n", 2);
    typeText("||                    HOTEL CHECK-IN                      ||\n", 2);
    typeText("===========++==================================++===========\n\n", 2);

    if (antrianCheckin.empty()) {
        setColor(12);
        typeText(">>> Tidak ada tamu dalam antrian check-in <<<\n\n", 30);
    } else {
        string tamu = antrianCheckin.front();
        antrianCheckin.pop();

        setColor(10);
        typeText("Memproses check-in untuk tamu: ", 20);
        setColor(11);
        typeText(tamu + "\n", 30);

        typeText("\nMempersiapkan kamar", 20);
        for (int i = 0; i < 3; i++) {
            cout << ". " << flush;
            Sleep(400);
        }
        cout << "\n";

        setColor(14);
        typeText(">>> Check-in berhasil! Selamat datang dan selamat beristirahat. <<<\n", 25);
    }

    setColor(7);
    typeText("\nTekan ENTER untuk kembali ke menu utama...", 15);
    cin.get();
    
    system("cls");
}


void Pemesanan::prosesCheckout() {
    system("cls");
    int id;
    setColor(14);
    typeText("\nMasukkan ID kamar untuk check-out: ", 25);
    cin >> id;
    cin.ignore();

    if (id < 1 || id > dataKamar.size() || dataKamar[id - 1].tersedia) {
        setColor(12);
        typeText("ID tidak valid atau kamar sudah kosong.\n", 25);
        return;
    }

    setColor(14);
    typeText("Tamu atas nama ", 25);
    cout << dataKamar[id - 1].namaTamu;
    typeText(" telah check-out.\n", 25);

    strcpy(dataKamar[id - 1].namaTamu, "");
    dataKamar[id - 1].tersedia = true;
    
    cin.get();
}
